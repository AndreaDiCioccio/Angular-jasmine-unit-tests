import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { BannerComponent } from './banner.component';
import { DebugElement } from '@angular/core';

describe('BannerComponent', () => {
    
    // autogenerated code
    let component: BannerComponent;
    let fixture: ComponentFixture<BannerComponent>;

    beforeEach(() => {
        TestBed.configureTestingModule({
            declarations: [ BannerComponent ]
        });
        fixture = TestBed.createComponent(BannerComponent);
        component = fixture.componentInstance;
        // I added this line, because otherwise p and bannerelement contain nothing
        fixture.detectChanges()
    });

    it('should create', () => {
        expect(component).toBeDefined();
    });

    // I added this code
    it('p should contain "banner works!"', () => {
        const elements: HTMLElement = fixture.nativeElement;
        const p = elements.querySelector('.message')
        expect(p.textContent).toEqual('banner works!');
    });

    it('should contain "banner works!"', () => {        
        const bannerElement: HTMLElement = fixture.nativeElement;
        expect(bannerElement.textContent).toContain('banner works!');
    });

    /* The properties of the nativeElement depend upon the runtime environment. You could be running these tests on a non-browser platform that doesn't have a DOM or whose DOM-emulation doesn't support the full HTMLElement API.

    Angular relies on the DebugElement abstraction to work safely across all supported platforms. 
    Instead of creating an HTML element tree, Angular creates a DebugElement tree that wraps the native elements for the runtime platform. 
    The nativeElement property unwraps the DebugElement and returns the platform-specific element object.

    Because the sample tests for this guide are designed to run only in a browser, a nativeElement in these tests is always an HTMLElement whose familiar methods and properties you can explore within a test.
    */
    it('should find the <p> with fixture.debugElement.nativeElement)', () => {
        const bannerDe: DebugElement = fixture.debugElement;
        const bannerEl: HTMLElement = bannerDe.nativeElement;
        const p = bannerEl.querySelector('p');
        expect(p.textContent).toEqual('banner works!');
    });
    
});
